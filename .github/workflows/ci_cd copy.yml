name: CI/CD
on:
  push:

env:
  MAIN_PYTHON_VERSION: '3.12'
  DOCUMENTATION_CNAME: ansys.github.io/aali-flowkit-python
  PACKAGE_NAME: aali-flowkit-python

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  binaries:
    name : Create binaries
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install .[all]

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Attempt to build executable
        id: first-attempt
        run: >
          pyinstaller src/aali/flowkit/__main__.py --onefile
          --name ${{ github.event.repository.name }}_${{ matrix.platform }}_test${{ matrix.ext }}
          --copy-metadata ${{ github.event.repository.name }}
          --hidden-import uvicorn --collect-all uvicorn
          --distpath build/dist --workpath build/build --specpath build
        continue-on-error: true

      - name: Modify spec file and retry build
        if: steps.first-attempt.outcome == 'failure'
        run: |
          echo "import sys ; sys.setrecursionlimit(sys.getrecursionlimit() * 5)" >> ${{ github.event.repository.name }}_${{ matrix.platform }}_test${{ matrix.ext }}.spec
          pyinstaller ${{ github.event.repository.name }}_${{ matrix.platform }}_test${{ matrix.ext }}.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}_binaries
          path: build/dist/${{ github.event.repository.name }}_${{ matrix.platform }}_*

  sign-windows-binaries:
    name: Sign Windows binaries
    needs: [binaries]
    runs-on:
      group: ansys-network
      labels: [self-hosted, Windows, signtool]
    steps:
      - name: Checkout SignTool
        uses: actions/checkout@v4
        with:
          repository: ansys-internal/signtool-ansys-apps
          token: ${{ secrets.SIGNTOOL_ACCESS_TOKEN }}

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: windows_*_binaries
          path: signtool/installer

      - name: List contents
        run: ls -R signtool/installer

      - name: Create dist directory
        shell: pwsh
        run: mkdir -p signtool/installer/dist

      - name: Sign Windows executables
        working-directory: signtool
        shell: pwsh
        run: |
            # collect every .exe that came from the download‑artifact step
            $files = Get-ChildItem installer -Recurse -Filter "*.exe"

            if ($files.Count -eq 0) {
                Write-Error "❌  No Windows executables found in signtool/installer — signing aborted."
                exit 1               # → step fails → job fails → workflow fails
            }

            # Create dist directory if it doesn't exist
            if (!(Test-Path installer/dist)) {
                New-Item -ItemType Directory -Path installer/dist
            }

            foreach ($file in $files) {
                $jobname = $file.BaseName
                $destFile = "installer/dist/$($file.Name)"
                .\Ansys.SignClient.exe sign --signUrl https://csign.ansys.com -r gh_signtool_account -s '${{ secrets.SIGNTOOL_PWD }}' -n $jobname -i $file.FullName -o $file.FullName

                # Copy the signed file to the dist directory
                Copy-Item -Path $file.FullName -Destination $destFile
            }

      - name: Upload signed Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries-signed
          path: signtool/installer/dist/*
          if-no-files-found: error
